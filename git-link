#!/bin/bash -e

DEFAULT_REMOTE="origin"
SUPPORTED_PLATFORMS="github|gitlab"
readonly DEFAULT_REMOTE SUPPORTED_PLATFORMS

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  cmd="$(basename "$0")"
  echo "Creates a link to a code hosting platform ($SUPPORTED_PLATFORMS) for the"
  echo "given file, at the current revision, possibly highlighting a line or "
  echo "a range of lines, if 1 or 2 line numbers are provided too".
  echo "It may be called from anywhere, and will automatically detect the root"
  echo "of the repository."
  echo ""
  echo "Usage: $cmd FILE [LINE_NUMBER [END_LINE_NUMBER]]"
  echo "   or: $cmd -r REMOTE_TO_USE FILE [LINE_NUMBER [END_LINE_NUMBER]]"
  echo ""
  echo "Options:"
  echo "   -r REMOTE_TO_USE   the remote to use to detect the platform for which"
  echo "                      to create a link ($SUPPORTED_PLATFORMS)"
  echo ""
  echo "Example:"
  echo "    # Let's say I cloned git repositories under my \"Workspaces\" directory".
  echo
  echo "    # 1. It works from anywhere outside the repository:"
  echo
  echo "    > $cmd ~/Workspaces/some-repo/path/to/some-file.txt 18 25"
  echo "    https://github.com/organization/some-repo/blob/1a037ecae82f1f6ef672e0cdc102467cdd583e97/path/to/some-file.txt#L18-L25"
  echo
  echo "    # or, if using Gitlab:"
  echo "    https://gitlab.com/organization/group/subgroup/some-repo/-/blob/1a037ecae82f1f6ef672e0cdc102467cdd583e97/path/to/some-file.txt#L18-25"
  echo
  echo "    # 2. It works from anywhere inside the repository too:"
  echo
  echo "    > cd ~/Workspaces/some-repo/path"
  echo "    > $cmd to/some-file.txt 18 25"
  echo "    # -> same output"
  exit 0
fi

print_usage_and_exit() {
  >&2 echo "Usage: $0 FILE [LINE_NUMBER [END_LINE_NUMBER]]"
  >&2 echo "   or: $0 -r REMOTE_TO_USE FILE [LINE_NUMBER [END_LINE_NUMBER]]"
  exit 1
}

read_and_validate_args() {
  if [[ $# -lt 1 ]]; then
    print_usage_and_exit
  fi
  
  if [[ "$1" == "-r" ]]; then
    if [[ $# -lt 3 ]]; then
      print_usage_and_exit
    fi
    REMOTE_TO_USE="$2"
    shift 2
  fi
  
  FILE="$1"
  START_LINE="$2"
  END_LINE="$3"
  readonly FILE START_LINE END_LINE
  
  if [[ ! -e "$FILE" ]]; then
    >&2 echo "No such file: $FILE"
    exit 1
  fi
}

find_REPO_ROOT() {
  ABS_FILE="$(realpath "$FILE")"
  readonly ABS_FILE
  
  if [[ -d "$ABS_FILE" ]]; then
    REPO_ROOT="$ABS_FILE"
  else
    REPO_ROOT="$(dirname "$ABS_FILE")"
  fi
  
  # `.git` can be a directory or a regular file, in case of a worktree
  while [[ ! -e "${REPO_ROOT}/.git" && "$(realpath "$REPO_ROOT")" != "/" ]]; do
    REPO_ROOT="${REPO_ROOT}/.."
  done
  
  REPO_ROOT="$(realpath "$REPO_ROOT")"
  readonly REPO_ROOT
  
  if [[ ! -e "${REPO_ROOT}/.git" ]]; then
    >&2 echo "Could not found a git repository in parents of: $FILE"
    exit 1
  fi
}

determine_remote_to_use() {
  if [[ -n "$REMOTE_TO_USE" ]]; then
    if ! git remote | grep -q "$REMOTE_TO_USE"; then
      >&2 echo "Unknown remote: $REMOTE_TO_USE"
      exit 1
    fi
    if ! git remote -v | grep "$REMOTE_TO_USE" | grep -qE "($SUPPORTED_PLATFORMS)"; then
      >&2 echo "No supported platform found for remote: $REMOTE_TO_USE."
      >&2 echo "Found:"
      >&2 git remote -v | grep "$REMOTE_TO_USE"
      exit 1
    fi
  fi

  if [[ -z "$REMOTE_TO_USE" ]]; then
    # see if default remote exists and is using a supported platform
    if git remote -v | grep "$DEFAULT_REMOTE" | grep -qE "($SUPPORTED_PLATFORMS)"; then
      REMOTE_TO_USE="$DEFAULT_REMOTE"
    fi
    # find first remote using a supported platform, if any
    if [[ -z "$REMOTE_TO_USE" ]]; then
      REMOTE_TO_USE="$(git remote -v | grep -E "($SUPPORTED_PLATFORMS)" | head -n1 | awk '{print $1}')"
    fi
    if [[ -z "$REMOTE_TO_USE" ]]; then
      >&2 echo "No remote found for a supported platform ($SUPPORTED_PLATFORMS)"
      exit 1
    fi
  fi
  readonly REMOTE_TO_USE
}

forge_and_print_url() {
  REVISION="$(git rev-parse HEAD)"
  readonly REVISION

  if git remote -v | grep "$REMOTE_TO_USE" | grep -q github; then
    GITHUB_PROJECT="$(git config "remote.$REMOTE_TO_USE.url" | sed -r 's/https:\/\/github\.com\/(.*)\.git/\1/' | sed -r 's/git@github\.com:(.*)\.git/\1/')"
    readonly GITHUB_PROJECT

    FILE_URL="https://github.com/${GITHUB_PROJECT}/blob/${REVISION}/${REL_FILE}"

    if [[ -n "$START_LINE" ]]; then
      FILE_URL="${FILE_URL}#L${START_LINE}"
    fi
    if [[ -n "$END_LINE" ]]; then
      FILE_URL="${FILE_URL}-L${END_LINE}"
    fi
  elif git remote -v | grep "$REMOTE_TO_USE" | grep -q gitlab; then
    GITLAB_PROJECT="$(git config "remote.$REMOTE_TO_USE.url" | sed -r 's/https:\/\/gitlab\.com\/(.*)\.git/\1/' | sed -r 's/git@gitlab\.com:(.*)\.git/\1/')"
    readonly GITLAB_PROJECT

    FILE_URL="https://gitlab.com/${GITLAB_PROJECT}/-/blob/${REVISION}/${REL_FILE}"

    if [[ -n "$START_LINE" ]]; then
      FILE_URL="${FILE_URL}#L${START_LINE}"
    fi
    if [[ -n "$END_LINE" ]]; then
      FILE_URL="${FILE_URL}-${END_LINE}"
    fi
  fi

  echo "$FILE_URL"
}

main() {
  read_and_validate_args "$@"
  find_REPO_ROOT
  
  REL_FILE="$(realpath --relative-to "$REPO_ROOT" "$FILE")"
  readonly REL_FILE
  
  cd "$REPO_ROOT"
  determine_remote_to_use
  forge_and_print_url
}

main "$@"
